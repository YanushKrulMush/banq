// <auto-generated />
using Broker.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Broker.Domain.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220105215817_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Broker.Domain.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Number")
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("Broker.Domain.AccountStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int>("StockId")
                        .HasColumnType("integer")
                        .HasColumnName("stock_id");

                    b.HasKey("Id")
                        .HasName("pk_account_stocks");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_account_stocks_account_id");

                    b.HasIndex("StockId")
                        .HasDatabaseName("ix_account_stocks_stock_id");

                    b.ToTable("account_stocks");
                });

            modelBuilder.Entity("Broker.Domain.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_stock");

                    b.ToTable("stock");
                });

            modelBuilder.Entity("Broker.Domain.AccountStock", b =>
                {
                    b.HasOne("Broker.Domain.Account", "Account")
                        .WithMany("AccountStocks")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("fk_account_stocks_accounts_account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Broker.Domain.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .HasConstraintName("fk_account_stocks_stock_stock_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Broker.Domain.Account", b =>
                {
                    b.Navigation("AccountStocks");
                });
#pragma warning restore 612, 618
        }
    }
}
